// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: scheduleflow.io/scheduleflow/pkg/apis/kubeproxy/informer.proto

package kubeproxy

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	actor "github.com/asynkron/protoactor-go/actor"
	proto "github.com/gogo/protobuf/proto"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	_ "k8s.io/apimachinery/pkg/runtime/schema"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SubscribeAction int32

const (
	SubscribeAction_CREATE SubscribeAction = 0
	SubscribeAction_UPDATE SubscribeAction = 1
	SubscribeAction_DELETE SubscribeAction = 2
)

var SubscribeAction_name = map[int32]string{
	0: "CREATE",
	1: "UPDATE",
	2: "DELETE",
}

var SubscribeAction_value = map[string]int32{
	"CREATE": 0,
	"UPDATE": 1,
	"DELETE": 2,
}

func (x SubscribeAction) String() string {
	return proto.EnumName(SubscribeAction_name, int32(x))
}

func (SubscribeAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_30ef4636c06a9afa, []int{0}
}

type GroupVersionResource struct {
	Group    string `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`
	Version  string `protobuf:"bytes,2,opt,name=Version,proto3" json:"Version,omitempty"`
	Resource string `protobuf:"bytes,3,opt,name=Resource,proto3" json:"Resource,omitempty"`
}

func (m *GroupVersionResource) Reset()         { *m = GroupVersionResource{} }
func (m *GroupVersionResource) String() string { return proto.CompactTextString(m) }
func (*GroupVersionResource) ProtoMessage()    {}
func (*GroupVersionResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_30ef4636c06a9afa, []int{0}
}
func (m *GroupVersionResource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupVersionResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupVersionResource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupVersionResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupVersionResource.Merge(m, src)
}
func (m *GroupVersionResource) XXX_Size() int {
	return m.Size()
}
func (m *GroupVersionResource) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupVersionResource.DiscardUnknown(m)
}

var xxx_messageInfo_GroupVersionResource proto.InternalMessageInfo

func (m *GroupVersionResource) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *GroupVersionResource) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *GroupVersionResource) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

type SubscribeOption struct {
	RateLimitation int64 `protobuf:"varint,1,opt,name=RateLimitation,proto3" json:"RateLimitation,omitempty"`
}

func (m *SubscribeOption) Reset()         { *m = SubscribeOption{} }
func (m *SubscribeOption) String() string { return proto.CompactTextString(m) }
func (*SubscribeOption) ProtoMessage()    {}
func (*SubscribeOption) Descriptor() ([]byte, []int) {
	return fileDescriptor_30ef4636c06a9afa, []int{1}
}
func (m *SubscribeOption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeOption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeOption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeOption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeOption.Merge(m, src)
}
func (m *SubscribeOption) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeOption) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeOption.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeOption proto.InternalMessageInfo

func (m *SubscribeOption) GetRateLimitation() int64 {
	if m != nil {
		return m.RateLimitation
	}
	return 0
}

type SubscribeResource struct {
	GVR        *GroupVersionResource `protobuf:"bytes,1,opt,name=GVR,proto3" json:"GVR,omitempty"`
	ActionCode int32                 `protobuf:"varint,2,opt,name=ActionCode,proto3" json:"ActionCode,omitempty"`
	Option     *SubscribeOption      `protobuf:"bytes,3,opt,name=Option,proto3" json:"Option,omitempty"`
}

func (m *SubscribeResource) Reset()         { *m = SubscribeResource{} }
func (m *SubscribeResource) String() string { return proto.CompactTextString(m) }
func (*SubscribeResource) ProtoMessage()    {}
func (*SubscribeResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_30ef4636c06a9afa, []int{2}
}
func (m *SubscribeResource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeResource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeResource.Merge(m, src)
}
func (m *SubscribeResource) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeResource) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeResource.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeResource proto.InternalMessageInfo

func (m *SubscribeResource) GetGVR() *GroupVersionResource {
	if m != nil {
		return m.GVR
	}
	return nil
}

func (m *SubscribeResource) GetActionCode() int32 {
	if m != nil {
		return m.ActionCode
	}
	return 0
}

func (m *SubscribeResource) GetOption() *SubscribeOption {
	if m != nil {
		return m.Option
	}
	return nil
}

type SubscribeResourceFor struct {
	Resource   *SubscribeResource `protobuf:"bytes,1,opt,name=Resource,proto3" json:"Resource,omitempty"`
	Subscriber *actor.PID         `protobuf:"bytes,2,opt,name=Subscriber,proto3" json:"Subscriber,omitempty"`
}

func (m *SubscribeResourceFor) Reset()         { *m = SubscribeResourceFor{} }
func (m *SubscribeResourceFor) String() string { return proto.CompactTextString(m) }
func (*SubscribeResourceFor) ProtoMessage()    {}
func (*SubscribeResourceFor) Descriptor() ([]byte, []int) {
	return fileDescriptor_30ef4636c06a9afa, []int{3}
}
func (m *SubscribeResourceFor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeResourceFor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeResourceFor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeResourceFor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeResourceFor.Merge(m, src)
}
func (m *SubscribeResourceFor) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeResourceFor) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeResourceFor.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeResourceFor proto.InternalMessageInfo

func (m *SubscribeResourceFor) GetResource() *SubscribeResource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *SubscribeResourceFor) GetSubscriber() *actor.PID {
	if m != nil {
		return m.Subscriber
	}
	return nil
}

type SubscribeConfirm struct {
	Timestamp *v1.Time           `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Subscribe *SubscribeResource `protobuf:"bytes,2,opt,name=Subscribe,proto3" json:"Subscribe,omitempty"`
}

func (m *SubscribeConfirm) Reset()         { *m = SubscribeConfirm{} }
func (m *SubscribeConfirm) String() string { return proto.CompactTextString(m) }
func (*SubscribeConfirm) ProtoMessage()    {}
func (*SubscribeConfirm) Descriptor() ([]byte, []int) {
	return fileDescriptor_30ef4636c06a9afa, []int{4}
}
func (m *SubscribeConfirm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeConfirm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeConfirm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeConfirm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeConfirm.Merge(m, src)
}
func (m *SubscribeConfirm) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeConfirm) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeConfirm.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeConfirm proto.InternalMessageInfo

func (m *SubscribeConfirm) GetTimestamp() *v1.Time {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *SubscribeConfirm) GetSubscribe() *SubscribeResource {
	if m != nil {
		return m.Subscribe
	}
	return nil
}

type CreateEvent struct {
	Timestamp   *v1.Time              `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	GVR         *GroupVersionResource `protobuf:"bytes,2,opt,name=GVR,proto3" json:"GVR,omitempty"`
	RawResource []byte                `protobuf:"bytes,3,opt,name=RawResource,proto3" json:"RawResource,omitempty"`
}

func (m *CreateEvent) Reset()         { *m = CreateEvent{} }
func (m *CreateEvent) String() string { return proto.CompactTextString(m) }
func (*CreateEvent) ProtoMessage()    {}
func (*CreateEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_30ef4636c06a9afa, []int{5}
}
func (m *CreateEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateEvent.Merge(m, src)
}
func (m *CreateEvent) XXX_Size() int {
	return m.Size()
}
func (m *CreateEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateEvent.DiscardUnknown(m)
}

var xxx_messageInfo_CreateEvent proto.InternalMessageInfo

func (m *CreateEvent) GetTimestamp() *v1.Time {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *CreateEvent) GetGVR() *GroupVersionResource {
	if m != nil {
		return m.GVR
	}
	return nil
}

func (m *CreateEvent) GetRawResource() []byte {
	if m != nil {
		return m.RawResource
	}
	return nil
}

type DeleteEvent struct {
	Timestamp   *v1.Time              `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	GVR         *GroupVersionResource `protobuf:"bytes,2,opt,name=GVR,proto3" json:"GVR,omitempty"`
	RawResource []byte                `protobuf:"bytes,3,opt,name=RawResource,proto3" json:"RawResource,omitempty"`
}

func (m *DeleteEvent) Reset()         { *m = DeleteEvent{} }
func (m *DeleteEvent) String() string { return proto.CompactTextString(m) }
func (*DeleteEvent) ProtoMessage()    {}
func (*DeleteEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_30ef4636c06a9afa, []int{6}
}
func (m *DeleteEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteEvent.Merge(m, src)
}
func (m *DeleteEvent) XXX_Size() int {
	return m.Size()
}
func (m *DeleteEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteEvent.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteEvent proto.InternalMessageInfo

func (m *DeleteEvent) GetTimestamp() *v1.Time {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *DeleteEvent) GetGVR() *GroupVersionResource {
	if m != nil {
		return m.GVR
	}
	return nil
}

func (m *DeleteEvent) GetRawResource() []byte {
	if m != nil {
		return m.RawResource
	}
	return nil
}

type UpdateEvent struct {
	Timestamp   *v1.Time              `protobuf:"bytes,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	GVR         *GroupVersionResource `protobuf:"bytes,2,opt,name=GVR,proto3" json:"GVR,omitempty"`
	OldResource []byte                `protobuf:"bytes,3,opt,name=OldResource,proto3" json:"OldResource,omitempty"`
	NewResource []byte                `protobuf:"bytes,4,opt,name=NewResource,proto3" json:"NewResource,omitempty"`
}

func (m *UpdateEvent) Reset()         { *m = UpdateEvent{} }
func (m *UpdateEvent) String() string { return proto.CompactTextString(m) }
func (*UpdateEvent) ProtoMessage()    {}
func (*UpdateEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_30ef4636c06a9afa, []int{7}
}
func (m *UpdateEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateEvent.Merge(m, src)
}
func (m *UpdateEvent) XXX_Size() int {
	return m.Size()
}
func (m *UpdateEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateEvent.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateEvent proto.InternalMessageInfo

func (m *UpdateEvent) GetTimestamp() *v1.Time {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *UpdateEvent) GetGVR() *GroupVersionResource {
	if m != nil {
		return m.GVR
	}
	return nil
}

func (m *UpdateEvent) GetOldResource() []byte {
	if m != nil {
		return m.OldResource
	}
	return nil
}

func (m *UpdateEvent) GetNewResource() []byte {
	if m != nil {
		return m.NewResource
	}
	return nil
}

func init() {
	proto.RegisterEnum("kubeproxy.SubscribeAction", SubscribeAction_name, SubscribeAction_value)
	proto.RegisterType((*GroupVersionResource)(nil), "kubeproxy.GroupVersionResource")
	proto.RegisterType((*SubscribeOption)(nil), "kubeproxy.SubscribeOption")
	proto.RegisterType((*SubscribeResource)(nil), "kubeproxy.SubscribeResource")
	proto.RegisterType((*SubscribeResourceFor)(nil), "kubeproxy.SubscribeResourceFor")
	proto.RegisterType((*SubscribeConfirm)(nil), "kubeproxy.SubscribeConfirm")
	proto.RegisterType((*CreateEvent)(nil), "kubeproxy.CreateEvent")
	proto.RegisterType((*DeleteEvent)(nil), "kubeproxy.DeleteEvent")
	proto.RegisterType((*UpdateEvent)(nil), "kubeproxy.UpdateEvent")
}

func init() {
	proto.RegisterFile("scheduleflow.io/scheduleflow/pkg/apis/kubeproxy/informer.proto", fileDescriptor_30ef4636c06a9afa)
}

var fileDescriptor_30ef4636c06a9afa = []byte{
	// 583 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x8d, 0xdb, 0xaf, 0xfd, 0xc8, 0x35, 0x82, 0x60, 0x65, 0x11, 0x45, 0xc8, 0x54, 0x46, 0x42,
	0x28, 0x12, 0x63, 0x25, 0x50, 0x54, 0x58, 0x20, 0x85, 0xc4, 0x94, 0x4a, 0x15, 0xad, 0x86, 0xb4,
	0x0b, 0x76, 0x63, 0x67, 0x92, 0x8c, 0x12, 0x7b, 0xac, 0xf1, 0x38, 0x25, 0x12, 0x0f, 0xc1, 0x12,
	0xf1, 0x0c, 0x3c, 0x08, 0x2b, 0xd4, 0x25, 0x4b, 0x94, 0xbc, 0x08, 0x9a, 0x71, 0xea, 0x98, 0xb4,
	0x20, 0x21, 0xb1, 0x80, 0x8d, 0x35, 0xf7, 0xdc, 0x73, 0xce, 0x9c, 0xf9, 0xf1, 0xc0, 0xb3, 0x24,
	0x18, 0xd1, 0x7e, 0x3a, 0xa1, 0x83, 0x09, 0x3f, 0x43, 0x8c, 0xbb, 0xc5, 0xda, 0x8d, 0xc7, 0x43,
	0x97, 0xc4, 0x2c, 0x71, 0xc7, 0xa9, 0x4f, 0x63, 0xc1, 0xdf, 0xce, 0x5c, 0x16, 0x0d, 0xb8, 0x08,
	0xa9, 0x40, 0xb1, 0xe0, 0x92, 0x5b, 0xe5, 0xbc, 0x53, 0x7f, 0x3c, 0xde, 0x4b, 0x94, 0x03, 0x89,
	0x59, 0x48, 0x82, 0x11, 0x8b, 0xa8, 0x98, 0x69, 0x07, 0x91, 0x46, 0x92, 0x85, 0x54, 0x5b, 0x87,
	0xc4, 0x1d, 0xd2, 0x88, 0x0a, 0x22, 0x69, 0x3f, 0xb3, 0xa8, 0x3f, 0xfa, 0x99, 0x4e, 0xcf, 0x1c,
	0x52, 0x49, 0xdc, 0x69, 0xf3, 0x92, 0x6a, 0x77, 0xc8, 0xe4, 0x28, 0xf5, 0x51, 0xc0, 0x43, 0xb7,
	0x9d, 0xcc, 0xa2, 0xb1, 0xe0, 0xd1, 0x41, 0xcf, 0xd5, 0x4d, 0x12, 0x48, 0x2e, 0x1e, 0x0c, 0xb9,
	0xab, 0x07, 0xd9, 0x37, 0x93, 0x39, 0x3e, 0x54, 0xf7, 0x05, 0x4f, 0xe3, 0x53, 0x2a, 0x12, 0xc6,
	0x23, 0x4c, 0x13, 0x9e, 0x8a, 0x80, 0x5a, 0x55, 0xd8, 0xd2, 0x78, 0xcd, 0xd8, 0x31, 0xee, 0x97,
	0x71, 0x56, 0x58, 0x35, 0xf8, 0x7f, 0x49, 0xac, 0x6d, 0x68, 0xfc, 0xa2, 0xb4, 0xea, 0x70, 0xed,
	0x42, 0x5b, 0xdb, 0xd4, 0xad, 0xbc, 0x76, 0x9e, 0xc0, 0xcd, 0xd7, 0xa9, 0x9f, 0x04, 0x82, 0xf9,
	0xf4, 0x28, 0x96, 0x8a, 0x7e, 0x0f, 0x6e, 0x60, 0x22, 0xe9, 0x21, 0x0b, 0x99, 0x24, 0x0a, 0xd1,
	0xf3, 0x6c, 0xe2, 0x35, 0xd4, 0xf9, 0x68, 0xc0, 0xad, 0x5c, 0x9b, 0x87, 0x6b, 0xc2, 0xe6, 0xfe,
	0x29, 0xd6, 0x12, 0xb3, 0x75, 0x07, 0xe5, 0x5b, 0x8e, 0xae, 0x5a, 0x0a, 0x56, 0x5c, 0xcb, 0x06,
	0x68, 0x07, 0xca, 0xb2, 0xc3, 0xfb, 0x54, 0x87, 0xdf, 0xc2, 0x05, 0xc4, 0x6a, 0xc1, 0x76, 0x16,
	0x4d, 0xa7, 0x37, 0x5b, 0xf5, 0x82, 0xeb, 0x5a, 0x78, 0xbc, 0x64, 0x3a, 0xef, 0xa0, 0x7a, 0x29,
	0xdb, 0x0b, 0x2e, 0xac, 0xbd, 0xc2, 0x5e, 0x64, 0x19, 0x6f, 0x5f, 0xe5, 0x96, 0x07, 0xcc, 0xd9,
	0x56, 0x03, 0x20, 0x6f, 0x0b, 0x9d, 0xd2, 0x6c, 0x01, 0xca, 0xce, 0xeb, 0xf8, 0xa0, 0x8b, 0x0b,
	0x5d, 0xe7, 0x83, 0x01, 0x95, 0xbc, 0xec, 0xf0, 0x68, 0xc0, 0x44, 0x68, 0xbd, 0x84, 0x72, 0x8f,
	0x85, 0x34, 0x91, 0x24, 0x8c, 0x97, 0x73, 0x37, 0x50, 0x76, 0x9f, 0x50, 0xf1, 0x3e, 0xa1, 0x78,
	0x3c, 0x54, 0x40, 0x82, 0xd4, 0x7d, 0x42, 0xd3, 0x26, 0x52, 0x32, 0xbc, 0x12, 0x5b, 0x4f, 0xa1,
	0x9c, 0xbb, 0x2f, 0x93, 0xfc, 0x7a, 0x15, 0x2b, 0xba, 0xf3, 0xc9, 0x00, 0xb3, 0x23, 0x28, 0x91,
	0xd4, 0x9b, 0xd2, 0x48, 0xfe, 0xc1, 0x54, 0xcb, 0x93, 0xdf, 0xf8, 0x8d, 0x93, 0xdf, 0x01, 0x13,
	0x93, 0xb3, 0x1f, 0x2e, 0xe7, 0x75, 0x5c, 0x84, 0x74, 0xdc, 0x2e, 0x9d, 0xd0, 0x7f, 0x24, 0xee,
	0x17, 0x03, 0xcc, 0x93, 0xb8, 0xff, 0xd7, 0xec, 0xee, 0xd1, 0xa4, 0xbf, 0x1e, 0xb7, 0x00, 0x29,
	0xc6, 0x2b, 0xba, 0x5a, 0xd0, 0x7f, 0x19, 0xa3, 0x00, 0x35, 0x76, 0x0b, 0xef, 0x43, 0xf6, 0x4b,
	0x5a, 0x00, 0xdb, 0x1d, 0xec, 0xb5, 0x7b, 0x5e, 0xa5, 0xa4, 0xc6, 0x27, 0xc7, 0x5d, 0x35, 0x36,
	0xd4, 0xb8, 0xeb, 0x1d, 0x7a, 0x3d, 0xaf, 0xb2, 0xf1, 0xfc, 0xee, 0xe7, 0xb9, 0x6d, 0x9c, 0xcf,
	0x6d, 0xe3, 0xdb, 0xdc, 0x36, 0xde, 0x2f, 0xec, 0xd2, 0xf9, 0xc2, 0x2e, 0x7d, 0x5d, 0xd8, 0xa5,
	0x37, 0xab, 0x47, 0xd8, 0xdf, 0xd6, 0xcf, 0xdc, 0xc3, 0xef, 0x01, 0x00, 0x00, 0xff, 0xff, 0x40,
	0xb0, 0x6a, 0x0d, 0xd8, 0x05, 0x00, 0x00,
}

func (m *GroupVersionResource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupVersionResource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupVersionResource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Resource) > 0 {
		i -= len(m.Resource)
		copy(dAtA[i:], m.Resource)
		i = encodeVarintInformer(dAtA, i, uint64(len(m.Resource)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintInformer(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Group) > 0 {
		i -= len(m.Group)
		copy(dAtA[i:], m.Group)
		i = encodeVarintInformer(dAtA, i, uint64(len(m.Group)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubscribeOption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeOption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeOption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RateLimitation != 0 {
		i = encodeVarintInformer(dAtA, i, uint64(m.RateLimitation))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubscribeResource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeResource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeResource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Option != nil {
		{
			size, err := m.Option.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInformer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ActionCode != 0 {
		i = encodeVarintInformer(dAtA, i, uint64(m.ActionCode))
		i--
		dAtA[i] = 0x10
	}
	if m.GVR != nil {
		{
			size, err := m.GVR.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInformer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubscribeResourceFor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeResourceFor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeResourceFor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Subscriber != nil {
		{
			size, err := m.Subscriber.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInformer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Resource != nil {
		{
			size, err := m.Resource.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInformer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SubscribeConfirm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeConfirm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeConfirm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Subscribe != nil {
		{
			size, err := m.Subscribe.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInformer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInformer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RawResource) > 0 {
		i -= len(m.RawResource)
		copy(dAtA[i:], m.RawResource)
		i = encodeVarintInformer(dAtA, i, uint64(len(m.RawResource)))
		i--
		dAtA[i] = 0x1a
	}
	if m.GVR != nil {
		{
			size, err := m.GVR.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInformer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInformer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RawResource) > 0 {
		i -= len(m.RawResource)
		copy(dAtA[i:], m.RawResource)
		i = encodeVarintInformer(dAtA, i, uint64(len(m.RawResource)))
		i--
		dAtA[i] = 0x1a
	}
	if m.GVR != nil {
		{
			size, err := m.GVR.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInformer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInformer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewResource) > 0 {
		i -= len(m.NewResource)
		copy(dAtA[i:], m.NewResource)
		i = encodeVarintInformer(dAtA, i, uint64(len(m.NewResource)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OldResource) > 0 {
		i -= len(m.OldResource)
		copy(dAtA[i:], m.OldResource)
		i = encodeVarintInformer(dAtA, i, uint64(len(m.OldResource)))
		i--
		dAtA[i] = 0x1a
	}
	if m.GVR != nil {
		{
			size, err := m.GVR.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInformer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Timestamp != nil {
		{
			size, err := m.Timestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInformer(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintInformer(dAtA []byte, offset int, v uint64) int {
	offset -= sovInformer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GroupVersionResource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Group)
	if l > 0 {
		n += 1 + l + sovInformer(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovInformer(uint64(l))
	}
	l = len(m.Resource)
	if l > 0 {
		n += 1 + l + sovInformer(uint64(l))
	}
	return n
}

func (m *SubscribeOption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RateLimitation != 0 {
		n += 1 + sovInformer(uint64(m.RateLimitation))
	}
	return n
}

func (m *SubscribeResource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GVR != nil {
		l = m.GVR.Size()
		n += 1 + l + sovInformer(uint64(l))
	}
	if m.ActionCode != 0 {
		n += 1 + sovInformer(uint64(m.ActionCode))
	}
	if m.Option != nil {
		l = m.Option.Size()
		n += 1 + l + sovInformer(uint64(l))
	}
	return n
}

func (m *SubscribeResourceFor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resource != nil {
		l = m.Resource.Size()
		n += 1 + l + sovInformer(uint64(l))
	}
	if m.Subscriber != nil {
		l = m.Subscriber.Size()
		n += 1 + l + sovInformer(uint64(l))
	}
	return n
}

func (m *SubscribeConfirm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovInformer(uint64(l))
	}
	if m.Subscribe != nil {
		l = m.Subscribe.Size()
		n += 1 + l + sovInformer(uint64(l))
	}
	return n
}

func (m *CreateEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovInformer(uint64(l))
	}
	if m.GVR != nil {
		l = m.GVR.Size()
		n += 1 + l + sovInformer(uint64(l))
	}
	l = len(m.RawResource)
	if l > 0 {
		n += 1 + l + sovInformer(uint64(l))
	}
	return n
}

func (m *DeleteEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovInformer(uint64(l))
	}
	if m.GVR != nil {
		l = m.GVR.Size()
		n += 1 + l + sovInformer(uint64(l))
	}
	l = len(m.RawResource)
	if l > 0 {
		n += 1 + l + sovInformer(uint64(l))
	}
	return n
}

func (m *UpdateEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovInformer(uint64(l))
	}
	if m.GVR != nil {
		l = m.GVR.Size()
		n += 1 + l + sovInformer(uint64(l))
	}
	l = len(m.OldResource)
	if l > 0 {
		n += 1 + l + sovInformer(uint64(l))
	}
	l = len(m.NewResource)
	if l > 0 {
		n += 1 + l + sovInformer(uint64(l))
	}
	return n
}

func sovInformer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInformer(x uint64) (n int) {
	return sovInformer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GroupVersionResource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInformer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupVersionResource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupVersionResource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInformer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInformer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInformer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Group = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInformer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInformer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInformer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInformer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInformer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInformer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Resource = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInformer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInformer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeOption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInformer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeOption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeOption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateLimitation", wireType)
			}
			m.RateLimitation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInformer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RateLimitation |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInformer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInformer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeResource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInformer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeResource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeResource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GVR", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInformer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInformer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInformer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GVR == nil {
				m.GVR = &GroupVersionResource{}
			}
			if err := m.GVR.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionCode", wireType)
			}
			m.ActionCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInformer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActionCode |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Option", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInformer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInformer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInformer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Option == nil {
				m.Option = &SubscribeOption{}
			}
			if err := m.Option.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInformer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInformer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeResourceFor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInformer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeResourceFor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeResourceFor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resource", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInformer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInformer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInformer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resource == nil {
				m.Resource = &SubscribeResource{}
			}
			if err := m.Resource.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriber", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInformer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInformer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInformer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subscriber == nil {
				m.Subscriber = &actor.PID{}
			}
			if err := m.Subscriber.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInformer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInformer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeConfirm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInformer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeConfirm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeConfirm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInformer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInformer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInformer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &v1.Time{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscribe", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInformer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInformer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInformer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subscribe == nil {
				m.Subscribe = &SubscribeResource{}
			}
			if err := m.Subscribe.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInformer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInformer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInformer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInformer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInformer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInformer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &v1.Time{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GVR", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInformer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInformer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInformer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GVR == nil {
				m.GVR = &GroupVersionResource{}
			}
			if err := m.GVR.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawResource", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInformer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInformer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInformer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawResource = append(m.RawResource[:0], dAtA[iNdEx:postIndex]...)
			if m.RawResource == nil {
				m.RawResource = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInformer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInformer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInformer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInformer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInformer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInformer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &v1.Time{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GVR", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInformer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInformer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInformer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GVR == nil {
				m.GVR = &GroupVersionResource{}
			}
			if err := m.GVR.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawResource", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInformer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInformer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInformer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawResource = append(m.RawResource[:0], dAtA[iNdEx:postIndex]...)
			if m.RawResource == nil {
				m.RawResource = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInformer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInformer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInformer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInformer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInformer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInformer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &v1.Time{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GVR", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInformer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInformer
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInformer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GVR == nil {
				m.GVR = &GroupVersionResource{}
			}
			if err := m.GVR.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldResource", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInformer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInformer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInformer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldResource = append(m.OldResource[:0], dAtA[iNdEx:postIndex]...)
			if m.OldResource == nil {
				m.OldResource = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewResource", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInformer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInformer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInformer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewResource = append(m.NewResource[:0], dAtA[iNdEx:postIndex]...)
			if m.NewResource == nil {
				m.NewResource = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInformer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInformer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInformer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInformer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInformer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInformer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInformer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInformer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInformer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInformer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInformer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInformer = fmt.Errorf("proto: unexpected end of group")
)
